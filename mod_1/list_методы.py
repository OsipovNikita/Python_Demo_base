sample = [1, ["another", "ist"], ("a", "tuple")] # Список состоит из целого числа, другого списка и кортежа
print(sample[1])    # ('a', 'tuple')
print(sample)

slist1 = list()  # вовращает пустой список - аналоично
slist1 = []
print(slist1)

mylist = ["DTemp", 220, 'A', 10.3, 11.5, 10.14] # Этот список содержит строку  с моделью датчика, целое и дробное число
print("Это список:", mylist)

myData = mylist[3:]  # получили только данные измерений
# а не лучше ли использовать кортеж?
myPr = ("DTemp", 220, 'A', [10.3, 11.5, 10.14])  # реализация конкретного датчика

mylist[0] = "List item 1 again" #Изменяем первый (нулевой) элемент листа mylist
print(mylist)

mylist[-1] = 3.18 #Изменяем последний элемент листа
print(mylist)

print(mylist[:])    #Считываются все элементы 

print(mylist[0:2]) #Считываются нулевой и первый элементы 

print(mylist[-3:-1]) #Считываются элементы от нулевого (-3) до второго (-1) (не включительно)

print(mylist[1:])    #Считываются элементы от первого до последнего

x = 2
if x in mylist:     # оператор проверки на вхождение in (или not in)
    print('есть', x)
else:
    print('нет', x)

# 1. Методы списка

a = [8, 7, 5.5, 1000, 3.50, 200]
a[0] = 7
print(a)          # [7, 7, 5.5, 1000, 3.50, 200]
print(a.index(7)) # 0
print(a.count(7)) # 2

a.insert(2, 1000) # то же самое и срез a[2:2] = [1000]
print(a) # [7, 7, 1000, 5.5, 1000, 3.5, 200]

a.append(5.5)
print(a) # [7, 7, 1000, 5.5, 1000, 3.5, 200, 5.5]

a += [0, 0]
print(a) # [7, 7, 1000, 5.5, 1000, 3.5, 200, 5.5, 0, 0]

L = list('cde')
L = ['cde']
L.extend('fgh') # Добавляет в конец списка L все элементы итерируемого объекта +=
print(L)    # ['c', 'd', 'e', 'f', 'g', 'h']

b = a.pop() # вернет последний элемент, удаляя его из списка
print(b)    # 0 

b = a.pop(6) # вернет 6-й элемент (индекс), удаляя его из списка
print(b)    # 200

print(a)    # [7, 7, 1000, 5.5, 1000, 3.5, 5.5, 0]

ass = a.sort()    # сортирует исходный объект (с параметром reverse = True - по убыванию)
print(a, ass)    # [0, 3.5, 5.5, 5.5, 7, 7, 1000, 1000]
print(a.sort()) # возвращает None

b1 = [21,15,7,8]
a1 = sorted(b1) # создаст новый список, содержащий отсортированную версию предоставленного ей списка
print(a1,'---', b1)    # [7, 8, 15, 21] --- [21, 15, 7, 8]

letters = ['z', 'A', 'a', 'Z']
letters = sorted(letters)
print("['z', 'A', 'a', 'Z'] sorted в ", letters)   #['A', 'Z', 'a', 'z']

letters = ['z', 'A', 'a', 'Z']
letters.sort()
print("['z', 'A', 'a', 'Z'] sort в ", letters)   #['A', 'Z', 'a', 'z']

'''
Методы используют ASCII-алфавитную сортировку
(обобщенный термин, означающий сортировку по кодовым пунктам) вместо алфавитной сортировки.
'''

letters = ['z', 'A', 'a', 'Z']
letters = sorted(letters, key=str.lower)
print("['z', 'A', 'a', 'Z'] sorted(s, key=str.lower) в ", letters)   #['A', 'a', 'z', 'Z']

letters = ['z', 'A', 'a', 'Z']
letters.sort(key=str.lower)
print("['z', 'A', 'a', 'Z'] sort(key=str.lower) в ", letters)   # ['A', 'a', 'z', 'Z']


a.remove(1000) # ищет первый экземпляр заданного значения в списке и удаляет это значение из списка
print(a)    # [0, 3.5, 5.5, 5.5, 7, 7, 1000]
'''Если метод remove не находит удаляемых элементов, он выдает ошибку'''

del a[2:4]  # Удаляет из списка элементы с индексами от 2 до 3 - тоже самое a[2:4] = []
print(a)    # [0, 3.5, 7, 7, 1000]

a.reverse()
print(a)    # [1000, 7, 7, 3.5, 0]

# 2. Сравнения и равенство
# Простое сравнение
a = [1, 5, 10]
b = [1, 5, 10]
print(a == b)# True

b[0] = 5
print(b)    # [5, 5, 10]
print(a < b)    # True

# Вложенное сравнение
a[0] = [3, "aaa"]
b[0] = [3, "bb"]
print(a, b) # ([[3, 'aaa'], 5, 10], [[3, 'bb'], 5, 10])
print(a < b) #   True
